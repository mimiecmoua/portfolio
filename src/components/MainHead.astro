---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  keywords?: string | undefined;
  author?: string | undefined;
  image?: string | undefined;
  url?: string | undefined;
}

const {
  title = "webOara | Emilie Clain - Développeuse FullStack & Ingénieure IA Freelance à Béziers | webOara",
  description = "webOara - Portfolio d'Emilie Clain, développeuse FullStack & ingénieure IA freelance basée à Béziers. Spécialisée en développement web, IA, Machine Learning et marketing digital. Solutions innovantes pour entreprises et clients internationaux.",
  keywords = "webOara, Développeuse web, Ingénieure IA, Machine Learning, Deep Learning, Développement FullStack, Freelance, Béziers, Développement web, IA, Marketing digital, Solutions innovantes, Clients internationaux, Bilingue français/anglais",
  author = "Emilie Clain",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="keywords" content={keywords} />
<meta name="author" content={author} />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<!-- Google Analytics Script -->
<script
  async
  is:inline
  src="https://www.googletagmanager.com/gtag/js?id=G-4ZVPLS40H2"></script>
<script is:inline>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    window.dataLayer.push(arguments);
  }
  gtag("js", new Date());
  gtag("config", "G-4ZVPLS40H2");
</script>

<link rel="icon" type="image/png" href="/portfolio/assets/logo5.png" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>
<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

  if (typeof localStorage !== "undefined") {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
